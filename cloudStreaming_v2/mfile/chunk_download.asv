%% The function is to record the elapsed time spending
% download_frm_idx : the indices of frames to be downloaded
% delta : the ratio of the duration of high bandwidth over one period
% hi_bw : the value of the high bandwidth
% lo_bw : the value of the low bandwidth
% get_dynamic_bw.m
% chenw@cmu.edu

function [dropped_frms, rec_TS] = chunk_download(download_frm_sz, play_seq, dynamic_bw, req_TS, cur_play_TS, drop_idx)
    global T;
    total_size = sum(download_frm_sz);
    data_tobe_downloaded = total_size;
    curTS = req_TS;
    
    frm_rec_TS = zeros(size(download_frm_sz))
    for i = 1 : length(download_frm_sz)
        cur_frm_sz = download_frm_sz(i);
        cur_time_idx = floor(curTS + 1);
        cur_bw = dynamic_bw(cur_time_idx);
        elapsed_time = cur_frm_sz ./ cur_bw;
        frm_rec_TS(i) = curTS + elapsed_time;
        if frm_rec_TS(i) > play_seq(i)*T
        
        curTS = curTS + elapsed_time;
    end
    
    dropped_frms = [];
    
    while (data_tobe_downloaded > 0)
        cur_time_idx = floor(curTS + 1);
        left_time = cur_time_idx - curTS;
        cur_bw = dynamic_bw(cur_time_idx);
        possible_data_downloaded = left_time * cur_bw;
        
        downloaded_frms = (cum_frm_sz < possible_data_downloaded);
        
        if possible_data_downloaded > data_tobe_downloaded
            elapsed_time = data_tobe_downloaded./cur_bw;
            
            %% Find dropped frms
            frm_TS = cum_frm_sz ./ cur_bw;
            frm_due = play_seq .* T - curTS;
            tmp_dropped_frms = find(frm_TS - frm_due < 0);
            
            dropped_frms = [dropped_frms; tmp_dropped_frms];
            
            curTS = curTS + elapsed_time;
            data_tobe_downloaded = 0;
            break;
        else
            data_tobe_downloaded = data_tobe_downloaded - possible_data_downloaded;
            curTS = curTS + left_time;
        end
    end
    rec_TS = curTS;
end